// <common> -*- C++ -*-

#pragma once

#include <furi/core/common_defines.h>

namespace cookie {

// RAII for FURI_CRITICAL
class ScopedFuriCritical {
public:
    ScopedFuriCritical()
        : m_info(__furi_critical_enter()) {
    }

    ~ScopedFuriCritical() {
        __furi_critical_exit(m_info);
    }

private:
    __FuriCriticalInfo m_info;
};

// Function to allow passing C++11 enum classes as Furi uint32_t parameters
template <typename T>
inline constexpr uint32_t furi_enum_param(T val) {
    return static_cast<uint32_t>(val);
}

}

// Macro to implement bitwise operations for enum classes
#define IMPLEMENT_BITWISE_ENUM_CLASS_OPS(class_name)                                             \
    inline constexpr class_name operator|(class_name lhs, class_name rhs) {                      \
        return static_cast<class_name>(static_cast<unsigned>(lhs) | static_cast<unsigned>(rhs)); \
    }                                                                                            \
                                                                                                 \
    inline constexpr class_name operator&(class_name lhs, class_name rhs) {                      \
        return static_cast<class_name>(static_cast<unsigned>(lhs) & static_cast<unsigned>(rhs)); \
    }

#define IMPLEMENT_FRIEND_BITWISE_ENUM_CLASS_OPS(class_name)                                      \
    friend inline constexpr class_name operator|(class_name lhs, class_name rhs) {               \
        return static_cast<class_name>(static_cast<unsigned>(lhs) | static_cast<unsigned>(rhs)); \
    }                                                                                            \
                                                                                                 \
    friend inline constexpr class_name operator&(class_name lhs, class_name rhs) {               \
        return static_cast<class_name>(static_cast<unsigned>(lhs) & static_cast<unsigned>(rhs)); \
    }
