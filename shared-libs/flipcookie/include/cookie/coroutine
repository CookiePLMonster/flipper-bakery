// <coroutine> -*- C++ -*-

#pragma once

#include <atomic>
#include <coroutine>
#include <optional>
#include <tuple>

#include "common"
#include "event_loop"
#include "timer"

// Task type for C++ coroutines, suitable for use on Flipper.
// Not using any Furi naming, since it is unrelated to
// Furi primitives or FreeRTOS coroutines.
namespace cookie {

namespace details::coroutine {

template <typename T>
concept is_timer_type = std::same_as<T, FuriTimer> || std::same_as<T, FuriEventLoopTimer>;

template <typename T>
struct timer_start_stop;

template <>
struct timer_start_stop<::FuriTimer*> {
    static void start(::FuriTimer* timer, uint32_t interval) {
        ::furi_timer_start(timer, interval);
    }

    static void stop(::FuriTimer* timer) {
        ::furi_timer_stop(timer);
    }
};

template <>
struct timer_start_stop<::FuriEventLoopTimer*> {
    static void start(::FuriEventLoopTimer* timer, uint32_t interval) {
        ::furi_event_loop_timer_start(timer, interval);
    }

    static void stop(::FuriEventLoopTimer* timer) {
        ::furi_event_loop_timer_stop(timer);
    }
};

}

// Awaitable timer type. Calling co_await obj.await_delay(interval) on it suspends the coroutine
// for a specified time, but can additionally also be woken up (e.g. from input) by calling obj.wake_up().
template <details::coroutine::is_timer_type T = FuriTimer>
class AwaitableTimer {
public:
    using timer_type = T;
    using timer_furi_type = typename timer_type::pointer;
    using timer_start_stop = details::coroutine::timer_start_stop<timer_furi_type>;

    AwaitableTimer()
    requires std::same_as<timer_type, FuriTimer>
        : m_timer(timer_callback, FuriTimerTypeOnce, &m_awaiting_handle) {
    }

    AwaitableTimer(::FuriEventLoop* event_loop)
    requires std::same_as<timer_type, FuriEventLoopTimer>
        : m_timer(event_loop, timer_callback, FuriEventLoopTimerTypeOnce, &m_awaiting_handle) {
    }

    void wake_up(bool keep_awake_forever = false) {
        StateFlags new_flags(StateFlags::Skipped);
        if(keep_awake_forever) {
            new_flags |= StateFlags::KeepAwakeForever;
        }
        m_state_flags.store(new_flags, std::memory_order_relaxed);

        timer_start_stop::stop(*m_timer);
        std::coroutine_handle<> current_handle =
            m_awaiting_handle.exchange(nullptr, std::memory_order_relaxed);
        if(current_handle) {
            current_handle.resume();
        }
    }

    void reset() {
        m_state_flags.store(0, std::memory_order_relaxed);
        m_awaiting_handle.store(nullptr, std::memory_order_relaxed);
    }

    auto await_delay(uint32_t interval) {
        struct AwaitDelayAwaiter {
            AwaitDelayAwaiter(AwaitableTimer* timer, uint32_t interval)
                : m_timer(timer)
                , m_interval(interval) {
            }

            bool await_ready() const {
                return m_timer->try_clear_skip_flag();
            }

            void await_suspend(std::coroutine_handle<> h) {
                m_timer->start(h.address(), m_interval);
            }

            bool await_resume() {
                const bool was_skipped = m_timer->stop();
                // Return true if timed out, false if skipped
                return !was_skipped;
            }

        private:
            AwaitableTimer* m_timer;
            uint32_t m_interval;
        };
        return AwaitDelayAwaiter(this, interval);
    }

private:
    void start(void* handle_ptr, uint32_t interval) {
        m_awaiting_handle.store(
            std::coroutine_handle<>::from_address(handle_ptr), std::memory_order_relaxed);
        timer_start_stop::start(*m_timer, interval);
    }

    bool stop() {
        timer_start_stop::stop(*m_timer);
        m_awaiting_handle.store(nullptr, std::memory_order_relaxed);

        // Return true if the timer was skipped, either one-off or sticky
        return try_clear_skip_flag();
    }

    // Clear the Skipped flag if it's the only one and it's set, and check the previous flags
    bool try_clear_skip_flag() {
        uint8_t prev_flags = StateFlags::Skipped;
        m_state_flags.compare_exchange_strong(prev_flags, 0, std::memory_order_relaxed);
        return prev_flags != 0;
    }

    static void timer_callback(void* context) {
        auto handle_ptr = reinterpret_cast<std::atomic<std::coroutine_handle<>>*>(context);
        std::coroutine_handle<> current_handle =
            handle_ptr->exchange(nullptr, std::memory_order_relaxed);
        if(current_handle) {
            current_handle.resume();
        }
    }

private:
    enum StateFlags : uint8_t {
        Skipped = 1 << 0,
        KeepAwakeForever = 1 << 1,
    };
    IMPLEMENT_FRIEND_BITWISE_ENUM_CLASS_OPS(StateFlags)

    timer_type m_timer;
    std::atomic<std::coroutine_handle<>> m_awaiting_handle;
    std::atomic<uint8_t> m_state_flags{};
};

// Generic task type. Contrary to what is allowed in C++ apps targeting more elaborate systems,
// this return object MUST be stored somewhere, preferably an object. The lifetime of the coroutine
// is ALWAYS tied to the lifetime of this return object, fire-and-forget coroutines are NOT possible.
// TODO2: Support return values, right now only Task<void> is supported
template <typename... T>
struct [[nodiscard("The task object must be stored")]] Task {
    struct promise_type;
    using handle_type = std::coroutine_handle<promise_type>;
    using result_holder_type = std::tuple<T...>;
    static constexpr std::size_t num_results = std::tuple_size_v<result_holder_type>;

    struct promise_type {
        Task get_return_object() {
            return Task(handle_type::from_promise(*this));
        }
        std::suspend_never initial_suspend() {
            return {};
        }
        std::suspend_always final_suspend() {
            return {};
        }

        void return_value()
        requires(num_results == 0)
        {
        }

        void return_value(auto&& result)
        requires(num_results == 1)
        {
            m_result_holder = result;
        }

        void return_value(result_holder_type&& results)
        requires(num_results > 1)
        {
            m_result_holder = std::forward<result_holder_type>(results);
        }

        [[no_unique_address]] result_holder_type m_result_holder;
    };

    Task() = default;
    Task(handle_type handle)
        : m_handle(handle) {
    }
    Task(const Task&) = delete;
    Task& operator=(const Task&) = delete;

    Task(Task&& other)
        : m_handle(std::exchange(other.m_handle, nullptr)) {
    }
    Task& operator=(Task&& other) {
        reset();
        m_handle = std::exchange(other.m_handle, nullptr);
        return *this;
    }

    ~Task() {
        reset();
    }

    void reset() {
        if(m_handle) {
            m_handle.destroy();
            m_handle = nullptr;
        }
    }

    bool has_started() const {
        return m_handle;
    }

    bool is_running() const {
        return m_handle && !m_handle.done();
    }

    bool has_finished() const {
        return m_handle && m_handle.done();
    }

    auto try_take_result()
    requires(num_results == 1)
    {
        std::optional<std::tuple_element_t<0, result_holder_type>> result;
        if(has_finished()) {
            result.emplace(std::move(std::get<0>(m_handle.promise().m_result_holder)));

            // Once we move the results away, we don't really need the coroutine anymore
            reset();
        }
        return result;
    }

    auto try_take_result()
    requires(num_results > 1)
    {
        std::optional<result_holder_type> result;
        if(has_finished()) {
            result.emplace(std::move(m_handle.promise().m_result_holder));

            // Once we move the results away, we don't really need the coroutine anymore
            reset();
        }
        return result;
    }

private:
    handle_type m_handle;
};

}
